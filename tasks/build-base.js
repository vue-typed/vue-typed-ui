var gulp = require('gulp')
var through = require('through2')
var Path = require('path')
var _ = require('lodash')
var fs = require('fs')
var rename = require('gulp-rename')
var beautify = require('js-beautify').js_beautify
var utils = require('./utils')


module.exports = function (done) {
  gulp.src('./src/components/**/schema/props.json')
    .pipe(through.obj(function (file, enc, cb) {
      var dir = Path.resolve(Path.dirname(file.path), '..')
      var modul = Path.basename(dir)
      var jsonTarget = getSchema(dir)

      file.contents = new Buffer(parseProp(modul, JSON.stringify(jsonTarget)), 'utf8')
      cb(null, file)
    }))
    .pipe(rename(function (path) {
      path.extname = '.ts'
      path.basename = '_base'
      path.dirname = path.dirname.substr(0, path.dirname.length - 7)
    }))
    .pipe(gulp.dest(function (file) {
      return file.base
    }))
    .on('end', done)
}


function getSchema(dir) {
  return JSON.parse(fs.readFileSync(Path.resolve(dir, 'schema', 'props.json')))
}


function parseProp(module, json) {
  var schema = JSON.parse(json)
  var strProps = ''
  var strBase = ''

  strProps += utils.comment('PLEASE DO NOT EDIT THIS FILE (automatically generated from ./schema/props.json)')

  let mixins = ''
  if (!schema.base.Vue) {
    let k = _.keys(schema.base)[0]
    mixins = k
    strProps += `\nimport { ${k} } from "${schema.base[k]}"`
  }

  if (schema.description) {
    strProps += utils.comment(schema.description)
  }

  strProps += 'import { Prop, Virtual, Mixin } from "vue-typed"'
  strProps += '\nimport * as Vue from "vue"'

  let extender = 'Virtual<Vue>()'
  if (mixins) {
    // extender = `Mixin(${mixins})`
    extender = mixins
  }

  strProps += `\r\nexport abstract class _${utils.pascalCase(module)}Base extends ${extender} { `

  var props = schema.props
  _.each(props, (v, k) => {
    strProps += '\r\n' + utils.comment(v)
    strProps += '\r\n@Prop('

    let prms = []

    if (v.type && v.type !== 'any' && v.type.indexOf('|') <= -1 && v.type.indexOf('.') <= -1) prms.push('type: ' + utils.pascalCase(v.type))
    if (typeof (v.default) !== 'undefined') prms.push('default: ' + v.default)

    if (prms.length)
      strProps += '{ ' + prms.join() + ' }'

    strProps += ')'
    strProps += '\r\n' + _.camelCase(k)
    if (v.type) {
      strProps += ': ' + v.type
    }

  })
  strProps += '\r\n\r\n}'


  if (schema.events ) {
    var strEvents = `\r\nexport enum _${utils.pascalCase(module)}Events {`
    _.each(schema.events, (v, k) => {
      strEvents += utils.comment(v)
      strEvents += `\r\n${_.camelCase(k)} = "${k}",\r\n`
    })
    strEvents = strEvents.substr(0, strEvents.length - 3) + '\r\n}'
    
    strProps += '\r\n\r\n' + strEvents
  }

  return beautify(strProps)
}