/**
 * PLEASE DO NOT EDIT THIS FILE (automatically generated from ./schema/props.json)
 */
import {
    Prop,
    Virtual,
    Mixin
} from "vue-typed"
import * as Vue from "vue"
export abstract class _ModalBase extends Virtual < Vue > () {

    /**
     * Attach show event to another element
     * 
     * @param {HTMLElement | JQuery | string} selector Element identifier
     * @type {string}
     */
    @Prop({
        type: String
    })
    attachShow: string

    /**
     * Attach hide event to another element
     * 
     * @param {HTMLElement | JQuery | string} selector Element identifier
     * @type {string}
     */
    @Prop({
        type: String
    })
    attachHide: string

    /**
     * Attach toggle event to another element
     * 
     * @param {HTMLElement | JQuery | string} selector Element identifier
     * @type {string}
     */
    @Prop({
        type: String
    })
    attachToggle: string

    /**
     * Attach refresh event to another element
     * 
     * @param {HTMLElement | JQuery | string} selector Element identifier
     * @type {string}
     */
    @Prop({
        type: String
    })
    attachRefresh: string

    /**
     * Setting to false will not allow you to close the modal by clicking on the dimmer.
     * 
     * @type {boolean}
     */
    @Prop({
        type: Boolean
    })
    closable: boolean

    /**
     * Named transition to use when animating menu in and out, full list can be found in ui transitions docs.
     * 
     * @type {SemanticUI.AnimationNames}
     */
    @Prop()
    transition: SemanticUI.AnimationNames

    /**
     * Allow second modal to be opened on top of the first modal.
     * 
     * @default false
     * @type {boolean}
     */
    @Prop({
        type: Boolean,
        default: false
    })
    allowMultiple: boolean

    /**
     * First input in modal will receive focus when shown.
     * 
     * @default false
     * @type {boolean}
     */
    @Prop({
        type: Boolean,
        default: false
    })
    autofocus: boolean

    /**
     * Header icon.
     * 
     * @type {string}
     */
    @Prop({
        type: String
    })
    icon: string

}


export enum _ModalEvents {
    /**
     * Is called when a modal starts to show.
     */
    show = "show",

        /**
         * Is called when a modal has finished showing animating.
         */
        visible = "visible",

        /**
         * Is called when a modal starts to hide. If the function returns false, the modal will not hide.
         */
        hide = "hide",

        /**
         * Is called after a modal has finished hiding animation.
         */
        hidden = "hidden",

        /**
         * Is called when a positive, approve or ok button is pressed. If the function returns false, the modal will not hide.
         */
        approve = "approve",

        /**
         * Is called when a negative, deny or cancel button is pressed. If the function returns false the modal will not hide.
         */
        deny = "deny"
}